[build-system]
requires = ["setuptools==80.9.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lintro"
version = "0.1.0"
description = "A unified CLI tool for code formatting, linting, and quality assurance"
readme = {file = "README.md", content-type = "text/markdown"}
authors = [
    {name = "Eitel Dagnin", email = "turbocoder13@gmail.com"},
]
license = "MIT"
keywords = ["linting", "formatting", "code-quality", "cli", "python", "javascript", "yaml", "docker"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
requires-python = ">=3.13.0,<3.14"
dependencies = [
    "click==8.2.1",
    "coverage-badge==1.1.2",
    "darglint==1.8.1",
    "loguru==0.7.3",
    "tabulate==0.9.0",
    "yamllint==1.37.1",
    "httpx==0.28.1",  # For scripts/delete-previous-lintro-comments.py
]

[project.optional-dependencies]
dev = [
    "pytest==8.4.1",
    "pytest-cov==6.2.1",
    "pytest-mock==3.14.1",
    "tox==4.28.1",
    "allure-pytest==2.15.0",
    "ruff",
    "mypy",
    "coverage-badge==1.1.2",
]
test = [
    "pytest==8.4.1",
    "pytest-cov==6.2.1",
    "pytest-mock==3.14.1",
]
typing = [
    "types-setuptools==80.9.0.20250529",
    "types-tabulate==0.9.0.20241207",
]

[project.scripts]
lintro = "lintro.cli:main"

[project.urls]
Homepage = "https://github.com/TurboCoder13/py-lintro"
Documentation = "https://github.com/TurboCoder13/py-lintro/docs"
Source = "https://github.com/TurboCoder13/py-lintro"

[tool.setuptools]
packages = [
    "lintro",
    "lintro.cli_utils",
    "lintro.cli_utils.commands",
    "lintro.enums",
    "lintro.exceptions",
    "lintro.formatters",
    "lintro.formatters.core",
    "lintro.formatters.styles",
    "lintro.formatters.tools",
    "lintro.models",
    "lintro.models.core",
    "lintro.parsers",
    "lintro.parsers.darglint",
    "lintro.parsers.hadolint",
    "lintro.parsers.prettier",
    "lintro.parsers.ruff",
    "lintro.parsers.yamllint",
    "lintro.tools",
    "lintro.tools.core",
    "lintro.tools.implementations",
    "lintro.utils",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*" 

# Ruff configuration for lintro project
[tool.ruff]
# Maximum line length for code
line-length = 88
# Target Python version
# (set to 3.13 for this project)
target-version = "py313"
# Rules to enable (E: pycodestyle errors, F: pyflakes, W: warnings, I: isort)
select = ["E", "F", "W", "I"]
# Rules to ignore (example: E501 is line length, which is handled by black/formatter)
ignore = []
# Whether to allow unsafe fixes (F841, etc.)
unsafe-fixes = false
# Exclude common virtualenv and build directories
exclude = [".venv", "venv", "env", "build", "dist", "__pycache__"] 

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "pytest==8.4.1",
    "pytest-cov==6.2.1",
    "twine>=6.1.0",
]


