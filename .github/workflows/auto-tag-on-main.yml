---
name: Release - Auto Tag Creation
# Automatically creates and pushes version tags when pyproject.toml version changes
# on main branch. Guards against duplicate tags and validates release commit format.

'on':
  push:
    branches: [main]
    paths:
      - pyproject.toml
    # Only when last commit message indicates a release bump
    # This avoids random tagging on pyproject edits
    # GitHub does not support commit message filters here; enforce in a guard step

permissions:
  contents: read

jobs:
  auto-tag:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      id-token: write
    timeout-minutes: 10
    # Only run when version actually changed
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf
        with:
          egress-policy: 'block'
          allowed-endpoints: >
            github.com:443
            api.github.com:443
            codeload.github.com:443
            downloads.github.com:443
            release-assets.githubusercontent.com:443
            objects.githubusercontent.com:443
            pypi.org:443
            files.pythonhosted.org:443
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          persist-credentials: false
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub App installation token
        id: app-token
        uses: actions/create-github-app-token@bf559f85448f9380bcfa2899dbdc01eb5b37be3a # v3.0.0-beta.2
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Guard ensure last commit is a release bump
        id: guard
        run: bash scripts/ci/guard-release-commit.sh

      - name: Skip if not a release bump commit
        if: steps.guard.outputs.ok != 'true'
        run: echo "Not a release bump commit; skipping tag creation."

      - name: Environment setup
        uses: TurboCoder13/py-lintro/.github/actions/setup-env@a43f1e2cedee7c582dd9d0b79387e4d31a2dce5c
        with:
          python-version: '3.13'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Read version from pyproject.toml
        id: version
        run: scripts/ci/auto-tag-unified.sh read-version

      - name: Detect previous version
        id: prev
        run: scripts/ci/auto-tag-unified.sh detect-previous

      - name: Skip if version unchanged
        if: steps.prev.outputs.version == steps.version.outputs.version
        run: echo "Version unchanged; skipping tag creation."

      - name: Check if tag exists
        id: check
        if: steps.prev.outputs.version != steps.version.outputs.version
        env:
          TAG: v${{ steps.version.outputs.version }}
        run: scripts/ci/auto-tag-unified.sh check-exists

      - name: Configure auth for push
        if: >-
          steps.prev.outputs.version != steps.version.outputs.version &&
          steps.check.outputs.exists == 'false'
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: scripts/ci/auto-tag-unified.sh configure-auth

      - name: Create and push tag
        if: >-
          steps.prev.outputs.version != steps.version.outputs.version &&
          steps.check.outputs.exists == 'false'
        env:
          TAG: v${{ steps.version.outputs.version }}
        run: scripts/ci/auto-tag-unified.sh create-push
