# SPDX-License-Identifier: MIT
# For license details, see the repository root LICENSE file.
---
name: Reusable SBOM Job

'on':
  workflow_call:
    inputs:
      bomctl-image:
        description: Digest-pinned bomctl image
        required: false
        type: string
    outputs:
      artifact-name:
        description: Name of uploaded SBOM artifact
        value: sbom-artifacts

permissions:
  contents: read
  actions: read

jobs:
  sbom:
    name: Generate and verify SBOM
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      actions: read
    env:
      BOMCTL_IMAGE: ${{ inputs.bomctl-image }}
      XDG_CACHE_HOME: ${{ github.workspace }}/.bomctl-cache
      EGRESS_ALLOWED_ENDPOINTS: ${{ vars.EGRESS_ALLOWED_ENDPOINTS }}
      EGRESS_ALLOWED_ENDPOINTS_MIRROR: ${{ vars.EGRESS_ALLOWED_ENDPOINTS_MIRROR }}
    steps:
      - name: Harden and Checkout
        uses: TurboCoder13/py-lintro/.github/actions/harden-and-checkout@ae541c778920330b6e82f3dd536bcf2a026324c0
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          egress_policy: block
          allowed-endpoints: ${{ env.EGRESS_ALLOWED_ENDPOINTS_MIRROR }}
      - name: Enforce pinned bomctl image digest
        if: ${{ hashFiles('scripts/ci/sbom-enforce-pinned-image.sh') != '' }}
        run: bash scripts/ci/sbom-enforce-pinned-image.sh
      - name: Login to GHCR (no buildx)
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Restore bomctl cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ${{ env.XDG_CACHE_HOME }}
          key: bomctl-cache-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}-${{ github.sha }}
          restore-keys: |
            bomctl-cache-${{ runner.os }}-
            bomctl-cache-
      - name: Generate SBOMs (CycloneDX 1.6 JSON & SPDX 2.3)
        run: bash scripts/ci/sbom-generate.sh --use-docker --format cyclonedx-1.6 --format spdx-2.3 --name "py-lintro-sbom" --alias project
      - name: Rename SBOM artifacts with tag/sha for traceability
        run: bash scripts/ci/sbom-rename-artifacts.sh dist/sbom
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: sbom-artifacts
          path: dist/sbom/*
          if-no-files-found: error
      - name: Verify bomctl image with cosign (keyless)
        run: bash scripts/ci/sbom-verify-container.sh
      - name: Attest SBOM artifacts with keyless cosign (optional)
        run: bash scripts/ci/sbom-attest-artifacts.sh dist/sbom
