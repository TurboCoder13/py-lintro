name: Lintro PR Check

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**.py'
      - '**.yml'
      - '**.yaml'
      - '**.json'
      - '**.md'
      - '**.sh'
      - 'Dockerfile'
      - 'requirements*.txt'
      - 'pyproject.toml'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  lintro:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper diff analysis
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13.4'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Install additional tools
      run: |
        # Install Node.js and npm for prettier
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs
        sudo npm install -g prettier@2.8.8
        
        # Install Terraform
        curl -fsSL https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip -o terraform.zip
        sudo unzip terraform.zip -d /usr/local/bin/
        rm terraform.zip
        
        # Install Hadolint
        curl -fsSL https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 -o hadolint
        chmod +x hadolint
        sudo mv hadolint /usr/local/bin/
    
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v46
      with:
        files: |
          **/*.py
          **/*.yml
          **/*.yaml
          **/*.json
          **/*.md
          **/*.sh
          Dockerfile
          requirements*.txt
          pyproject.toml
    
    - name: Run Lintro on changed files
      id: lintro
      if: steps.changed-files.outputs.all_changed_files != ''
      run: |
        echo "Running Lintro on changed files..."
        CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
        
        # Create a temporary file to store the output
        OUTPUT_FILE="lintro_output.txt"
        
        # Run lintro check on changed files and capture output
        lintro check $CHANGED_FILES --table-format > $OUTPUT_FILE || true
        
        # Format the output for GitHub comment
        echo 'LINTRO_OUTPUT<<EOF' >> $GITHUB_ENV
        echo '## Lintro Check Results' >> $GITHUB_ENV
        echo '```' >> $GITHUB_ENV
        cat $OUTPUT_FILE >> $GITHUB_ENV
        echo '```' >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
    
    - name: Comment on PR
      if: steps.changed-files.outputs.all_changed_files != ''
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = process.env.LINTRO_OUTPUT;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          }); 