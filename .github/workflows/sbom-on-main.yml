# SPDX-License-Identifier: MIT
# For license details, see the repository root LICENSE file.
---
name: SBOM on main

'on':
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: sbom-main-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sbom:
    name: Generate and verify SBOM (main)
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: read
    env:
      BOMCTL_IMAGE: ${{ vars.BOMCTL_IMAGE }}
      XDG_CACHE_HOME: ${{ github.workspace }}/.bomctl-cache
      EGRESS_ALLOWED_ENDPOINTS: ${{ vars.EGRESS_ALLOWED_ENDPOINTS }}
      EGRESS_ALLOWED_ENDPOINTS_MIRROR: ${{ vars.EGRESS_ALLOWED_ENDPOINTS_MIRROR }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Harden Runner (explicit allowlist)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2
        with:
          egress-policy: block
          allowed-endpoints: ${{ env.EGRESS_ALLOWED_ENDPOINTS }}
      - name: Diagnose egress (GitHub endpoints)
        run: |
          set -e
          echo "$EGRESS_ALLOWED_ENDPOINTS" | wc -l
          for h in api.github.com release-assets.githubusercontent.com github.com; do
            echo "Testing HTTPS HEAD to https://$h/"
            if curl -sI --max-time 5 "https://$h/" >/dev/null; then echo "OK: $h"; else echo "FAIL: $h"; fi
          done
          if [ "${TEST_GHCR:-0}" = "1" ]; then
            for h in ghcr.io ghcr.github.com pkg-containers.githubusercontent.com cdn.pkg-containers.githubusercontent.com; do
              echo "Testing HTTPS HEAD to https://$h/"
              if curl -sI --max-time 5 "https://$h/" >/dev/null; then echo "OK: $h"; else echo "FAIL: $h"; fi
            done
          fi
      - name: Enforce pinned bomctl image digest
        if: ${{ hashFiles('scripts/ci/sbom-enforce-pinned-image.sh') != '' }}
        run: bash scripts/ci/sbom-enforce-pinned-image.sh
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
      - name: Install bomctl from GitHub Releases (no registries)
        env:
          BOMCTL_VERSION: v0.4.3
        run: bash scripts/ci/sbom-install-binary-gh.sh
      # Diagnostics previously added; remove once stable
      - name: Restore bomctl cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ${{ env.XDG_CACHE_HOME }}
          key: bomctl-cache-${{ runner.os }}-${{ github.sha }}
      - name: Generate SBOMs (CycloneDX 1.6 JSON & SPDX 2.3)
        run: bash scripts/ci/sbom-generate.sh --skip-fetch --format cyclonedx-1.6 --format spdx-2.3 --name "py-lintro-sbom" --alias project || true
      - name: Fetch SBOM via bomctl binary (GitHub graph)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          bomctl fetch https://github.com/${{ github.repository }}
          # Export via script for consistency
          bash scripts/ci/sbom-generate.sh --format cyclonedx-1.6 --format spdx-2.3 --name "py-lintro-sbom" --alias project
      - name: Rename SBOM artifacts with tag/sha for traceability
        run: bash scripts/ci/sbom-rename-artifacts.sh dist/sbom
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: sbom-artifacts
          path: dist/sbom/*
          if-no-files-found: error
      - name: Verify bomctl image with cosign (keyless)
        run: bash scripts/ci/sbom-verify-container.sh
      - name: Attest SBOM artifacts with keyless cosign (optional)
        run: bash scripts/ci/sbom-attest-artifacts.sh dist/sbom
