---
name: Testing - Full Suite & Coverage
# Executes comprehensive test suite in Docker, generates coverage reports,
# uploads artifacts, and posts coverage information to PRs.

'on':
  push:
    branches: [main]
    paths:
      - '**.py'
      - pyproject.toml
      - .github/workflows/test-and-coverage.yml
      - scripts/local/run-tests.sh
      - scripts/docker/docker-test.sh
      - Dockerfile
      - docker-compose.yml
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  run-test-suite:
    permissions:
      contents: read
    runs-on: ubuntu-24.04
    timeout-minutes: 45
    concurrency:
      group: tests-${{ github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        shell: bash
    if: >-
      github.event_name != 'pull_request' ||
      github.event.pull_request.draft == false
    env:
      LINTRO_OUTPUT_DIR: /tmp/lintro
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      coverage-percentage: ${{ steps.coverage.outputs.percentage }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@92c522aaa6f53af082553dedc1596c80b71aba33
        with:
          egress-policy: 'block'
          allowed-endpoints: >
            github.com:443
            api.github.com:443
            codeload.github.com:443
            downloads.github.com:443
            release-assets.githubusercontent.com:443
            objects.githubusercontent.com:443
            img.shields.io:443
            ghcr.io:443
            pkg-containers.githubusercontent.com:443
            docker.io:443
            registry-1.docker.io:443
            auth.docker.io:443
            production.cloudflare.docker.com:443
            pypi.org:443
            files.pythonhosted.org:443
            codecov.io:443
            uploader.codecov.io:443
            storage.googleapis.com:443
            pings.codecov.com:443
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: Environment setup
        uses: TurboCoder13/turbo-ci/.github/actions/setup-env@${{ github.sha }}
      - name: Run comprehensive test suite
        run: |
          # Run tests with coverage
          uv run pytest --cov=lintro --cov-report=html --cov-report=xml --cov-report=term
      # (moved) Upload coverage badge artifact happens after badge generation below
      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: coverage-report-python-3.13
          path: htmlcov/
          retention-days: 30
      - name: Upload coverage XML as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: coverage-xml
          path: coverage.xml
          retention-days: 30
      - name: Upload .coverage as artifact (if present)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: ${{ hashFiles('.coverage') != '' }}
        with:
          name: coverage-dotfile
          path: .coverage
          retention-days: 30
      - name: Extract coverage percentage
        id: coverage
        run: |
          # Extract coverage percentage from coverage.xml
          if [ -f coverage.xml ]; then
            python3 -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          line_rate = float(root.get('line-rate', 0))
          percentage = round(line_rate * 100, 2)
          print(f'percentage={percentage}')
          " > coverage-env.txt
            source coverage-env.txt
            echo "COVERAGE_PERCENTAGE=$percentage" >> $GITHUB_ENV
            echo "percentage=$percentage" >> $GITHUB_OUTPUT
          else
            echo "COVERAGE_PERCENTAGE=0.0" >> $GITHUB_ENV
            echo "percentage=0.0" >> $GITHUB_OUTPUT
          fi

      - name: Enforce coverage threshold (80%)
        if: github.ref == 'refs/heads/main' && success()
        env:
          COVERAGE_PERCENTAGE: ${{ steps.coverage.outputs.percentage }}
        run: |
          # Enforce 80% coverage threshold
          if (( $(echo "$COVERAGE_PERCENTAGE < 80" | bc -l) )); then
            echo "‚ùå Coverage $COVERAGE_PERCENTAGE% is below 80% threshold"
            exit 1
          else
            echo "‚úÖ Coverage $COVERAGE_PERCENTAGE% meets 80% threshold"
          fi

      - name: Upload coverage to Codecov (always)
        if: always()
        continue-on-error: true
        # Pin Codecov action to commit SHA containing pinned github-script usage
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7
        with:
          files: coverage.xml
          flags: python-3.13
          fail_ci_if_error: false

      - name: Generate coverage badge (no commit)
        if: success()
        env:
          COVERAGE_PERCENTAGE: ${{ steps.coverage.outputs.percentage }}
        run: |
          # Generate coverage badge
          mkdir -p assets/images
          if (( $(echo "$COVERAGE_PERCENTAGE >= 80" | bc -l) )); then
            color="#4c1"  # Green
          elif (( $(echo "$COVERAGE_PERCENTAGE >= 60" | bc -l) )); then
            color="#dfb317"  # Yellow
          else
            color="#e05d44"  # Red
          fi
          
          cat > assets/images/coverage-badge.svg << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <svg xmlns="http://www.w3.org/2000/svg" width="99" height="20">
              <linearGradient id="b" x2="0" y2="100%">
                  <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
                  <stop offset="1" stop-opacity=".1"/>
              </linearGradient>
              <clipPath id="a">
                  <rect width="99" height="20" rx="3" fill="#fff"/>
              </clipPath>
              <g clip-path="url(#a)">
                  <path fill="#555" d="M0 0h63v20H0z"/>
                  <path fill="$color" d="M63 0h36v20H63z"/>
                  <path fill="url(#b)" d="M0 0h99v20H0z"/>
              </g>
              <g fill="#fff" text-anchor="middle" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="110">
                  <text x="325" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="530">coverage</text>
                  <text x="325" y="140" transform="scale(.1)" textLength="530">coverage</text>
                  <text x="800" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="260">${COVERAGE_PERCENTAGE}%</text>
                  <text x="800" y="140" transform="scale(.1)" textLength="260">${COVERAGE_PERCENTAGE}%</text>
              </g>
          </svg>
          EOF

      - name: Upload coverage badge artifact
        if: success()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: coverage-badge
          path: assets/images/coverage-badge.svg

  comment-pr-coverage:
    needs: run-test-suite
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    if: always() && github.event_name == 'pull_request' && github.event.pull_request.draft == false
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@92c522aaa6f53af082553dedc1596c80b71aba33
        with:
          egress-policy: 'block'
          allowed-endpoints: >
            github.com:443
            api.github.com:443
            codeload.github.com:443
            downloads.github.com:443
            release-assets.githubusercontent.com:443
            objects.githubusercontent.com:443
            img.shields.io:443
            pings.codecov.com:443
            codecov.io:443
            uploader.codecov.io:443
            storage.googleapis.com:443
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: Environment setup
        uses: TurboCoder13/turbo-ci/.github/actions/setup-env@${{ github.sha }}
      - name: Download coverage XML artifact (fallback for comment generation)
        if: always()
        continue-on-error: true
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: coverage-xml
          path: .
      - name: Generate coverage PR comment (always)
        if: always()
        env:
          COVERAGE_PERCENTAGE: ${{ needs.run-test-suite.outputs.coverage-percentage }}
          JOB_RESULT: ${{ needs.run-test-suite.result }}
        run: |
          # Generate coverage PR comment
          COVERAGE_VALUE="${COVERAGE_PERCENTAGE:-0.0}"
          if (( $(echo "$COVERAGE_VALUE >= 80" | bc -l) )); then
            COVERAGE_STATUS="‚úÖ"
            STATUS_TEXT="Target met (>80%)"
          else
            COVERAGE_STATUS="‚ö†Ô∏è"
            STATUS_TEXT="Below target (<80%)"
          fi
          
          if [ "$JOB_RESULT" != "success" ]; then
            BUILD_STATUS="‚ùå Tests failed"
          else
            BUILD_STATUS="‚úÖ Tests passed"
          fi
          
          cat > coverage-pr-comment.txt << EOF
          <!-- coverage-report -->
          
          **Build:** $BUILD_STATUS
          
          **Coverage:** $COVERAGE_STATUS **$COVERAGE_VALUE%**
          
          **Status:** $STATUS_TEXT
          
          ### üìã Coverage Details
          - **Generated:** $(date +%Y-%m-%d)
          - **Commit:** [$GITHUB_SHA](https://github.com/$GITHUB_REPOSITORY/commit/$GITHUB_SHA)
          
          ### üìÅ View Detailed Report
          **Direct Link:** [üìä HTML Coverage Report](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/artifacts)
          
          Or download manually:
          1. Go to the [Actions tab](https://github.com/$GITHUB_REPOSITORY/actions)
          2. Find this workflow run
          3. Download the "coverage-report-python-3.13" artifact
          4. Extract and open \`index.html\` in your browser
          EOF
        # yamllint enable
      - name: Comment PR with coverage info
        uses: TurboCoder13/turbo-ci/.github/actions/post-pr-comment@${{ github.sha }}
        with:
          file: coverage-pr-comment.txt
          marker: '<!-- coverage-report -->'
