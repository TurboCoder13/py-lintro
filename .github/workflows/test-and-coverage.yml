---
name: Test Suite & Coverage

'on':
  push:
    branches: [main]
    paths:
      - '**.py'
      - pyproject.toml
      - .github/workflows/test-coverage.yml
      - scripts/local/run-tests.sh
      - scripts/docker/docker-test.sh
      - Dockerfile
      - docker-compose.yml
  pull_request:
    branches: [main]
    paths:
      - '**.py'
      - pyproject.toml
      - .github/workflows/test-coverage.yml
      - scripts/local/run-tests.sh
      - scripts/docker/docker-test.sh
      - Dockerfile
      - docker-compose.yml
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  run-test-suite:
    runs-on: ubuntu-latest
    env:
      LINTRO_OUTPUT_DIR: /tmp/lintro
    outputs:
      coverage-percentage: ${{ steps.coverage-summary.outputs.percentage }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker test image
        run: |
          echo "Building Docker image with all testing tools pre-installed"
          docker compose build test-integration
      - name: Run comprehensive test suite in Docker
        run: ./scripts/docker/docker-test.sh
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
          flags: python-3.13
      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-python-3.13
          path: htmlcov/
          retention-days: 30
      - name: Upload coverage XML as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          retention-days: 30
      - name: Upload .coverage as artifact (if present)
        uses: actions/upload-artifact@v4
        if: ${{ hashFiles('.coverage') != '' }}
        with:
          name: coverage-dotfile
          path: .coverage
          retention-days: 30
      - name: Extract coverage percentage
        id: coverage-summary
        run: |
          # Extract the percentage from the script output
          PERCENTAGE=$(python3 scripts/utils/extract-coverage.py 2>&1 | \
            grep "percentage=" | tail -1 | \
            cut -d'=' -f2)
          echo "Extracted coverage percentage: $PERCENTAGE"
          echo "percentage=$PERCENTAGE" >> $GITHUB_OUTPUT

  comment-pr-coverage:
    needs: run-test-suite
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Install all tools and dependencies
        run: ./scripts/utils/install-tools.sh --local
      - name: Install Python dependencies
        run: uv sync --dev
      - name: Delete Previous Coverage PR Comments
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}

        # yamllint disable
        run: uv run python scripts/utils/delete-previous-lintro-comments.py "<!-- coverage-report -->"
        # yamllint enable

      - name: Generate coverage PR comment
        # yamllint disable
        run: |
          export COVERAGE_PERCENTAGE="${{ needs.run-test-suite.outputs.coverage-percentage }}"
          ./scripts/ci/coverage-pr-comment.sh
        # yamllint enable
      - name: Comment PR with coverage info
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('coverage-pr-comment.txt', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
