---
name: Release - Automated PR Creation
# Computes next semantic version using conventional commits and opens release PR.
# Prevents direct pushes to main by requiring PR workflow for all releases.

'on':
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  open-release-pr:
    permissions:
      contents: write
      pull-requests: write
    name: Compute next version and open Release PR
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    concurrency:
      group: release-pr-${{ github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        shell: bash
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@92c522aaa6f53af082553dedc1596c80b71aba33
        with:
          egress-policy: 'block'
          allowed-endpoints: >
            github.com:443
            api.github.com:443
            codeload.github.com:443
            downloads.github.com:443
            release-assets.githubusercontent.com:443
            objects.githubusercontent.com:443
            pypi.org:443
            files.pythonhosted.org:443
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Environment setup
        uses: TurboCoder13/py-lintro/.github/actions/setup-env@448d8d96fea3374dd1e534f67afd8d61182c0de7
        with:
          python-version: '3.13'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Use python-semantic-release via uvx (tool isolation)
        run: echo "python-semantic-release will be invoked via uvx; not installed into project env"

      - name: Compute next version (semantic-release dry run)
        id: semrel
        env:
          RELEASE_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAX_BUMP: minor
        run: uv run python scripts/ci/semantic_release_compute_next.py
      - name: Fail if no release tag baseline
        if: ${{ failure() }}
        run: scripts/ci/semantic-release-helpers.sh fail_no_tag_baseline

      - name: Read current version from pyproject.toml
        id: current
        run: scripts/ci/semantic-release-helpers.sh read_current_version
        # yamllint enable

      - name: Skip if no new version
        if: ${{ steps.semrel.outputs.next_version == '' || steps.semrel.outputs.next_version == steps.current.outputs.current_version }}
        run: scripts/ci/semantic-release-helpers.sh skip_no_new_version "${{ steps.semrel.outputs.next_version }}" "${{ steps.current.outputs.current_version }}"

      - name: Update version files
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        run: scripts/ci/semantic-release-helpers.sh update_version_files "${{ steps.semrel.outputs.next_version }}"

      - name: Install external tools for Lintro (formatting)
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        run: scripts/ci/semantic-release-helpers.sh install_external_tools

      - name: Run Lintro format
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        run: uv run lintro format . --output-format grid

      - name: Run Lintro check
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        run: uv run lintro check . --output-format grid

      - name: Create Release PR
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        id: cpr
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(release): cut ${{ steps.semrel.outputs.next_version }}'
          title: 'chore(release): prepare ${{ steps.semrel.outputs.next_version }}'
          body: |
            Automated version bump to `${{ steps.semrel.outputs.next_version }}`.

            - Updates `pyproject.toml` and `lintro/__init__.py`
            - Respects branch protection (no direct push to `main`)
            - Upon merge, tag and publish workflows will run automatically
          branch: release/${{ steps.semrel.outputs.next_version }}
          base: main
          labels: |
            release-bump
          # yamllint enable

      - name: Enable auto-merge for Release PR
        if: ${{ steps.cpr.outputs.pull-request-number != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: scripts/ci/semantic-release-helpers.sh merge_release_pr "${{ steps.cpr.outputs.pull-request-number }}"
