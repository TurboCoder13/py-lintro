---
name: Automated Release PR (no direct push to main)

'on':
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  open-release-pr:
    permissions:
      contents: write
      pull-requests: write
    name: Compute next version and open Release PR
    runs-on: ubuntu-22.04
    concurrency:
      group: release-pr-${{ github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        shell: bash
    steps:
      - name: Harden and Checkout
        uses: ./.github/actions/harden-and-checkout
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: 3.13

      - name: Install uv
        uses: astral-sh/setup-uv@d9e0f98d3fc6adb07d1e3d37f3043649ddad06a1 # v6
        with:
          enable-cache: true

      - name: Sync deps
        run: uv sync --dev --no-progress

      - name: Use python-semantic-release via uvx (tool isolation)
        run: echo "python-semantic-release will be invoked via uvx; not installed into project env"

      - name: Compute next version (semantic-release dry run)
        id: semrel
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: bash scripts/ci/semantic-release-compute-next.sh

      - name: Read current version from pyproject.toml
        id: current
        run: |
          echo "current_version=$(uv run python scripts/utils/extract-version.py | sed 's/^version=//')" >> "$GITHUB_OUTPUT"
        # yamllint enable

      - name: Skip if no new version
        if: ${{ steps.semrel.outputs.next_version == '' || steps.semrel.outputs.next_version == steps.current.outputs.current_version }}
        run: |
          echo "No new version to release (next='${{ steps.semrel.outputs.next_version }}', current='${{ steps.current.outputs.current_version }}'). Skipping."

      - name: Update version files
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        env:
          VERSION: ${{ steps.semrel.outputs.next_version }}
        run: |
          uv run python scripts/utils/update-version.py "$VERSION"

      - name: Install external tools for Lintro (formatting)
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        run: |
          ./scripts/utils/install-tools.sh --local
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Run Lintro format
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        run: uv run lintro format . --output-format grid

      - name: Run Lintro check
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        run: uv run lintro check . --output-format grid

      - name: Create Release PR
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        id: cpr
        uses: peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c # v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(release): cut ${{ steps.semrel.outputs.next_version }}'
          title: 'chore(release): prepare ${{ steps.semrel.outputs.next_version }}'
          body: |
            Automated version bump to `${{ steps.semrel.outputs.next_version }}`.

            - Updates `pyproject.toml` and `lintro/__init__.py`
            - Respects branch protection (no direct push to `main`)
            - Upon merge, tag and publish workflows will run automatically
          branch: release/${{ steps.semrel.outputs.next_version }}
          base: main
          labels: |
            release-bump
          # yamllint enable

      - name: Enable auto-merge for Release PR
        if: ${{ steps.cpr.outputs.pull-request-number != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge --auto --squash ${{ steps.cpr.outputs.pull-request-number }} || true
