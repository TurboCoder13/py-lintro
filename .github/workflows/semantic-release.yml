---
name: Automated Release PR (no direct push to main)

'on':
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  open-release-pr:
    name: Compute next version and open Release PR
    runs-on: ubuntu-22.04
    concurrency:
      group: release-pr-${{ github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Sync deps
        run: uv sync --dev --no-progress

      - name: Install semantic-release
        run: uv add python-semantic-release

      - name: Compute next version (semantic-release dry run)
        id: semrel
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NO_COLOR: '1'
          FORCE_COLOR: '0'
        shell: bash
        # yamllint disable rule:line-length
        run: |
          set -euo pipefail
          echo "Running semantic-release in noop mode to compute next version"
          OUTPUT=$(uv run python -m semantic_release version --noop || true)
          echo "$OUTPUT"
          # Try multiple robust extraction patterns to handle formatting differences
          NEXT_VERSION=$(printf "%s\n" "$OUTPUT" \
            | sed -n 's/.*The next version is[: ]*\([^ ]\+\).*/\1/p' \
            | head -1 || true)

          if [ -z "${NEXT_VERSION}" ]; then
            # Fallback: infer from latest commit title using Conventional Commits
            CURR=$(uv run python scripts/utils/extract-version.py | sed 's/^version=//' )
            TITLE=$(git log -1 --pretty=%s)
            echo "Fallback based on commit title: $TITLE (current=$CURR)"
            bump() {
              local v="$1"; local kind="$2"
              local MA MI PA
              IFS='.' read -r MA MI PA <<< "$v"
              if [ "$kind" = "major" ]; then
                MA=$((MA+1)); MI=0; PA=0
              elif [ "$kind" = "minor" ]; then
                MI=$((MI+1)); PA=0
              else
                PA=$((PA+1))
              fi
              printf "%d.%d.%d" "$MA" "$MI" "$PA"
            }
            if echo "$TITLE" | grep -Eq '(^feat\(|^feat:|^.*!:)'; then
              NEXT_VERSION=$(bump "$CURR" minor)
            elif echo "$TITLE" | grep -Eq '(^fix\(|^fix:|^perf\(|^perf:)'; then
              NEXT_VERSION=$(bump "$CURR" patch)
            elif git log -1 --pretty=%B | grep -q 'BREAKING CHANGE'; then
              NEXT_VERSION=$(bump "$CURR" major)
            else
              NEXT_VERSION=""
            fi
          fi

          echo "Detected NEXT_VERSION=${NEXT_VERSION:-<empty>}"
          echo "next_version=${NEXT_VERSION}" >> "$GITHUB_OUTPUT"
        # yamllint enable

      - name: Read current version from pyproject.toml
        id: current
        # yamllint disable rule:line-length
        run: |
          echo "current_version=$(uv run python scripts/utils/extract-version.py | sed 's/^version=//')" >> "$GITHUB_OUTPUT"
        # yamllint enable

      - name: Skip if no new version
        # yamllint disable rule:line-length
        if: ${{ steps.semrel.outputs.next_version == '' || steps.semrel.outputs.next_version == steps.current.outputs.current_version }}
        run: |
          echo "No new version to release (next='${{ steps.semrel.outputs.next_version }}', current='${{ steps.current.outputs.current_version }}'). Skipping."

      - name: Update version files
        # yamllint disable rule:line-length
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        env:
          VERSION: ${{ steps.semrel.outputs.next_version }}
        run: |
          uv run python scripts/utils/update-version.py "$VERSION"

      - name: Install external tools for Lintro (formatting)
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        run: |
          ./scripts/utils/install-tools.sh --local
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Run Lintro format
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        run: uv run lintro format . --output-format grid

      - name: Run Lintro check
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        run: uv run lintro check . --output-format grid

      - name: Create Release PR
        # yamllint disable rule:line-length
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # yamllint disable rule:line-length
          commit-message: 'chore(release): cut ${{ steps.semrel.outputs.next_version }}'
          title: 'chore(release): prepare ${{ steps.semrel.outputs.next_version }}'
          body: |
            Automated version bump to `${{ steps.semrel.outputs.next_version }}`.

            - Updates `pyproject.toml` and `lintro/__init__.py`
            - Respects branch protection (no direct push to `main`)
            - Upon merge, tag and publish workflows will run automatically
          branch: release/${{ steps.semrel.outputs.next_version }}
          base: main
          # yamllint enable

      - name: Enable auto-merge for Release PR
        # yamllint disable rule:line-length
        if: ${{ steps.cpr.outputs.pull-request-number != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge --auto --squash ${{ steps.cpr.outputs.pull-request-number }} || true
