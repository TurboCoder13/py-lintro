---
name: Automated Release PR (no direct push to main)

'on':
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  open-release-pr:
    permissions:
      contents: write
      pull-requests: write
      issues: write
    name: Compute next version and open Release PR
    runs-on: ubuntu-24.04
    concurrency:
      group: release-pr-${{ github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        shell: bash
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2
        with:
          egress-policy: audit
          allowed-endpoints: |
            github.com:443
            api.github.com:443
            downloads.github.com:443
            objects.githubusercontent.com:443
            pkg-containers.githubusercontent.com:443
            pypi.org:443
            files.pythonhosted.org:443
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Environment setup
        uses: TurboCoder13/py-lintro/.github/actions/setup-env@38716f3d92da65fbe8f393706b6bd8884bf6c32e
        with:
          python-version: '3.13'

      - name: Use python-semantic-release via uvx (tool isolation)
        run: echo "python-semantic-release will be invoked via uvx; not installed into project env"

      - name: Compute next version (semantic-release dry run)
        id: semrel
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          MAX_BUMP: minor
        run: uv run python scripts/ci/semantic_release_compute_next.py
      - name: Fail if no release tag baseline
        if: ${{ failure() }}
        run: |
          echo "No v*-prefixed tag found. Please create a release tag (e.g., v0.4.0) before running." >&2
          exit 2

      - name: Read current version from pyproject.toml
        id: current
        run: |
          echo "current_version=$(uv run python scripts/utils/extract-version.py | sed 's/^version=//')" >> "$GITHUB_OUTPUT"
        # yamllint enable

      - name: Skip if no new version
        if: ${{ steps.semrel.outputs.next_version == '' || steps.semrel.outputs.next_version == steps.current.outputs.current_version }}
        run: |
          echo "No new version to release (next='${{ steps.semrel.outputs.next_version }}', current='${{ steps.current.outputs.current_version }}'). Skipping."

      - name: Update version files
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        env:
          VERSION: ${{ steps.semrel.outputs.next_version }}
        run: |
          uv run python scripts/utils/update-version.py "$VERSION"

      - name: Install external tools for Lintro (formatting)
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        run: |
          ./scripts/utils/install-tools.sh --local
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Run Lintro format
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        run: uv run lintro format . --output-format grid

      - name: Run Lintro check
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        run: uv run lintro check . --output-format grid

      - name: Create Release PR
        if: ${{ steps.semrel.outputs.next_version != '' && steps.semrel.outputs.next_version != steps.current.outputs.current_version }}
        id: cpr
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(release): cut ${{ steps.semrel.outputs.next_version }}'
          title: 'chore(release): prepare ${{ steps.semrel.outputs.next_version }}'
          body: |
            Automated version bump to `${{ steps.semrel.outputs.next_version }}`.

            - Updates `pyproject.toml` and `lintro/__init__.py`
            - Respects branch protection (no direct push to `main`)
            - Upon merge, tag and publish workflows will run automatically
          branch: release/${{ steps.semrel.outputs.next_version }}
          base: main
          labels: |
            release-bump
          # yamllint enable

      - name: Enable auto-merge for Release PR
        if: ${{ steps.cpr.outputs.pull-request-number != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge --auto --squash ${{ steps.cpr.outputs.pull-request-number }} || true
